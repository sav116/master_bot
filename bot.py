import io
import threading
import requests
import telebot
from telebot import types
import sqlite3
import time
import openpyxl

import config
import keyboard

from datetime import datetime

bot = telebot.TeleBot(config.token)

wb = None


# def update_google_doc(param=None):
#     while True:
#         global wb
#         response=requests.get(
#             "https://docs.google.com/spreadsheets/d/e/2PACX-1vTysMODR55FGpx2G1S6nfFxVcFQb90pysFa_LOSCjtKWeoP5lSkIo0wD4VPQ6J9FtNoX4ZOWsmQMfzV/pub?output=xlsx",
#             stream=True)
#         wb=openpyxl.load_workbook(filename=io.BytesIO(response.content), data_only=True)
#         time.sleep(300)
#
# _update_doc=threading.Thread(target=update_google_doc)
# _update_doc.start()
#
# def force_update_google_doc():
#     while True:
#         global wb
#         response=requests.get(
#             "https://docs.google.com/spreadsheets/d/e/2PACX-1vTysMODR55FGpx2G1S6nfFxVcFQb90pysFa_LOSCjtKWeoP5lSkIo0wD4VPQ6J9FtNoX4ZOWsmQMfzV/pub?output=xlsx",
#             stream=True)
#         wb=openpyxl.load_workbook(filename=io.BytesIO(response.content), data_only=True)
#         return "Google Doc –æ–±–Ω–æ–≤–ª–µ–Ω!"

def update_google_doc(param=None):
    while True:
        global wb
        response = requests.get(
            "https://docs.google.com/spreadsheets/d/e/2PACX-1vRVDJabzTpcOkIVsAmmCQ5xIrGbZvun7ax0c3u8tjkcpqsCEZtmihXF_aHGGkd1U0KyJjNsO-bgY89c/pub?output=xlsx",
            stream=True)
        wb = openpyxl.load_workbook(filename=io.BytesIO(response.content), data_only=True)
        time.sleep(300)


_update_doc = threading.Thread(target=update_google_doc)
_update_doc.start()


def force_update_google_doc():
    while True:
        global wb
        response = requests.get(
            "https://docs.google.com/spreadsheets/d/e/2PACX-1vRVDJabzTpcOkIVsAmmCQ5xIrGbZvun7ax0c3u8tjkcpqsCEZtmihXF_aHGGkd1U0KyJjNsO-bgY89c/pub?output=xlsx",
            stream=True)
        wb = openpyxl.load_workbook(filename=io.BytesIO(response.content), data_only=True)
        return "Google Doc –æ–±–Ω–æ–≤–ª–µ–Ω!"


@bot.message_handler(commands=['start'])
def send_welcome(message):
    userid = message.chat.id
    connect = sqlite3.connect('bot.db')
    q = connect.cursor()
    q.execute(""" CREATE TABLE IF NOT EXISTS client(
        id TEXT, surname TEXT, name1 TEXT,phone TEXT, cashback INTEGER, colvo INTEGER, adress TEXT
    ) """)
    q.execute("""CREATE TABLE IF NOT EXISTS problem(
        id TEXT, info TEXT
    )""")
    q.execute('''CREATE TABLE IF NOT EXISTS master_phone(
        id TEXT, phone TEXT
        )''')
    q.execute('''CREATE TABLE IF NOT EXISTS adm(
        id TEXT
        )''')
    connect.commit()
    res = q.execute("SELECT * FROM client where id is " + str(userid)).fetchone()
    if res is None:
        bot.send_message(message.chat.id,
                         "<b>–ù–µ–º–Ω–æ–≥–æ –æ –Ω–∞—Å:\nBlack-Izi - —ç—Ç–æ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ø–æ —Ä–µ–º–æ–Ω—Ç—É —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, –ø–ª–∞–Ω—à–µ—Ç–æ–≤, –Ω–æ—É—Ç–±—É–∫–æ–≤.\n–ú—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º —Ä–µ–º–æ–Ω—Ç –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n–í —Å—Ñ–µ—Ä—É –Ω–∞—à–∏—Ö —É—Å–ª—É–≥ –≤ —Ç–æ–º —á–∏—Å–ª–µ –≤—Ö–æ–¥—è—Ç –ø–µ—Ä–µ–∫–ª–µ–π–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª—å–Ω—ã—Ö –¥–∏—Å–ø–ª–µ–µ–≤ –ø–æ –∑–∞–≤–æ–¥—Å–∫–∏–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º, BGA –ø–∞–π–∫–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ iCloud, Mi, –ì—É–≥–ª –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞—à–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ –¥–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ –±–æ–ª–µ–µ 10 –ª–µ—Ç. –ù–∞ –≤—Å–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç –¥–∞—ë–º –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ—Ç 1 –º–µ—Å—è—Ü–∞.\n–†–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞–º–∏ –≤–¥–≤–æ–π–Ω–µ –≤—ã–≥–æ–¥–Ω–æ, –≤–∞–º —Ç–∞–∫–∂–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è cash back –±–∞–ª–ª—ã.</b>",
                         parse_mode='html', reply_markup=keyboard.reg)
    else:
        bot.send_message(userid, f"–ü–∏–≤–µ—Ç—Å—Ç–≤—É—é {message.from_user.username} –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ", reply_markup=keyboard.profile)


@bot.message_handler(commands=['admin'])
def admin_menu(message):
    adm = []
    connect = sqlite3.connect('bot.db')
    q = connect.cursor()
    res = q.execute("SELECT * FROM adm").fetchall()
    for i in res:
        adm.append(i[0])
    if message.chat.id in config.admins or str(message.chat.id) in adm:
        bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=keyboard.admin)
    else:
        bot.send_message(message.chat.id, "–î–ª—è –≤–∞—Å —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


@bot.message_handler(content_types=['text'])
def text_menu(message):
    if message.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏üë§":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        conenct = sqlite3.connect('bot.db')
        q = conenct.cursor()
        res = q.execute("SELECT * FROM client").fetchall()
        all_users = "–í—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n\n"
        for i in res:
            user = f"id - {i[0]}: –§–∞–º–∏–ª–∏—è - {i[1]}: –ò–º—è - {i[2]}: –¢–µ–ª–µ—Ñ–æ–Ω - {i[3]}: –ö—ç—à–±–µ–∫ - {i[5]}: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ {i[5]}: –ê–¥—Ä–µ—Å - {i[6]}"
            all_users = all_users + str(user) + "\n\n"
        bot.send_message(message.chat.id, all_users, reply_markup=keyboard.delete)

    if message.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—åüë§":
        try:
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            userid = str(message.chat.id)
            conenct = sqlite3.connect('bot.db')
            q = conenct.cursor()
            res = q.execute(f"SELECT * FROM client where id = {userid}").fetchone()
            name = res[2]
            phone = res[3]
            cashback = res[4]
            colvo = res[5]
            adress = res[6]
            bot.send_message(userid, f"{name} —ç—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—åüë®‚Äçüíª\n\n" \
                                     f"üì≤–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +{phone}\n" \
                                     f"üí≤–ö—ç—à–±–µ–∫: {cashback} —Ä—É–±\n" \
                                     f"‚öôÔ∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {colvo}\n" \
                                     f"üè†–ê–¥—Ä–µ—Å –≤–∞—à–µ–π –º–∞—Å—Ç–µ—Ä—Å–æ–π: {adress}", reply_markup=keyboard.delete)
        except Exception as e:
            bot.send_message(config.coder, "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ü–†–û–§–ò–õ–¨ 60‚ùóÔ∏è\n" \
                                           f"{e}")
    if message.text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Äüìû":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        send = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä‚òéÔ∏è")
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(send, setphone)

    if message.text == "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞ü¶∏":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        send = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ id –±—É–¥—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞üßû")
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(send, setadmin)

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—éüë®‚Äçüíª":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard.profile)

    if message.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–ºüßë‚Äçüîß":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        connect = sqlite3.connect('bot.db')
        q = connect.cursor()
        res = q.execute("SELECT * FROM master_phone").fetchone()
        phone = res[1]
        bot.send_message(message.chat.id, "–ï—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã‚ÅâÔ∏è\n" \
                                          f"–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –º–∞—Å—Ç–µ—Ä—Éüßë‚Äçüîß {phone}", reply_markup=keyboard.delete)

    if message.text == "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑‚öôÔ∏è":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", reply_markup=keyboard.dostavka)

    if message.text == "–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—Éüíµ":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞üì≤", reply_markup=keyboard.choice_brand)
        # bot.clear_step_handler_by_chat_id(message.chat.id)
        # bot.register_next_step_handler(send, send_price)

    if message.text == "–í—ã–∑–≤–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞üèé":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        now = datetime.now()
        work = now.replace(hour=13, minute=0, second=0, microsecond=0)
        now_date = datetime.now()
        if work >= now_date:
            bot.send_message(message.chat.id, "–í—ã–±–∏—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", reply_markup=keyboard.devices)

            delivery = "–ö—É—Ä—å–µ—Ä"
        else:
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–æ 13:00")

    if message.text in config.cura:
        config.delivery[message.chat.id] = message.text

    if message.text in config.sam:
        config.delivery[message.chat.id] = message.text

    if message.text == "–°–ø–∏—Å–∞—Ç—å –±–∞–ª—ãüôç":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        send = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ —Å–ø–∏—Å–∞—Ç—å –±–∞–ª—ã")
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(send, min_cashback)

    if message.text == "–ü—Ä–∏–µ–¥—É –≤ –º–∞—Å—Ç–µ—Ä—Å–∫—É—éüîß":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.send_message(message.chat.id, "–í—ã–±–∏—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", reply_markup=keyboard.devices)

    if message.text == "–ù–∞—á–∏—Å–ª–∏—Ç—å cashbacküí∞":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        send = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å cashback")
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(send, add_cashback)
    if message.text == "–û–±–Ω–æ–≤–∏—Ç—å Google Doc‚ôªÔ∏è":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.send_message(message.chat.id, text=force_update_google_doc())
    if message.text == "Google Doc link":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.send_message(message.chat.id,
                         "https://docs.google.com/spreadsheets/d/1cerKLVOwcbSgs6UQLJBUysapv_b2ACi6TlvHzxKhZJ8")


@bot.callback_query_handler(func=lambda call: True)
def answer(call):
    print(call.data)
    if call.data == "apple":
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(chat_id=call.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", parse_mode="html",
                         reply_markup=keyboard.apple_buttons)

    elif "iPhone" in call.data or "ipad" in call.data or "watch" in call.data:
        if not call.data.startswith('send_'):
            brand = "apple"
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.send_message(chat_id=call.message.chat.id, text=get_price(brand, call.data), parse_mode="html")

    # if call.data == "huawei_honor":
    #     bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    #     bot.send_message(chat_id=call.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", parse_mode="html",
    #                      reply_markup=keyboard.huawei_buttons)
    #
    # elif "Honor" in call.data or "Huawei" in call.data:
    #     if not call.data.startswith('send_'):
    #         brand = "huawei"
    #         bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    #         bot.send_message(chat_id=call.message.chat.id, text=get_price(brand, call.data), parse_mode="html")
    #
    # if call.data == "samsung":
    #     bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    #     bot.send_message(chat_id=call.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", parse_mode="html",
    #                      reply_markup=keyboard.samsung_buttons)
    #
    # elif "samsung" in call.data.lower():
    #     if not call.data.startswith('send_'):
    #         brand = "samsung"
    #         bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    #         bot.send_message(chat_id=call.message.chat.id, text=get_price(brand, call.data), parse_mode="html")
    #
    # if call.data == "xiaomi":
    #     bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    #     bot.send_message(chat_id=call.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", parse_mode="html",
    #                      reply_markup=keyboard.xiaomi_buttons)
    #
    # elif "xiaomi" in call.data.lower():
    #     if not call.data.startswith('send_'):
    #         brand = "xiaomi"
    #         bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    #         bot.send_message(chat_id=call.message.chat.id, text=get_price(brand, call.data), parse_mode="html")
    if call.data == "huawei_honor":
        send = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     text="–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Huawei/Honor –∏–ª–∏ –∫–æ–¥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", parse_mode="html")
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        bot.register_next_step_handler(send, huawei_honor_prices)

    if call.data == "samsung":
        send = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     text="–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Samsung –∏–ª–∏ –∫–æ–¥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", parse_mode="html")
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        bot.register_next_step_handler(send, samsung_prices)

    if call.data == "xiaomi":
        send = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     text="–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Xiaomi –∏–ª–∏ –∫–æ–¥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", parse_mode="html")
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        bot.register_next_step_handler(send, xiaomi_prices)

    if call.data == "oppo":
        send = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     text="–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Oppo –∏–ª–∏ –∫–æ–¥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", parse_mode="html")
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        bot.register_next_step_handler(send, oppo_prices)

    if call.data == "realmi":
        send = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     text="–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Realmi –∏–ª–∏ –∫–æ–¥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", parse_mode="html")
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        bot.register_next_step_handler(send, realmi_prices)

    if call.data == "vivo":
        send = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     text="–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Vivo –∏–ª–∏ –∫–æ–¥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", parse_mode="html")
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        bot.register_next_step_handler(send, vivo_prices)

    if call.data == "reg":
        send = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     text="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û", parse_mode="html")
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        bot.register_next_step_handler(send, register)

    if call.data == "delete":
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    if call.data == "phone":
        send = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", parse_mode="html")
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        bot.register_next_step_handler(send, next_step)

    if call.data == "tablet":
        send = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", parse_mode="html")
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        bot.register_next_step_handler(send, next_step)

    if call.data == "laptop":
        send = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", parse_mode="html")
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        bot.register_next_step_handler(send, diagnostic1)

    if call.data == "tv":
        send = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", parse_mode="html")
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        bot.register_next_step_handler(send, diagnostic1)

    arr = call.data.split("_")
    if arr[0] == "send":
        try:

            connect = sqlite3.connect("bot.db")
            q = connect.cursor()
            res = q.execute(f"SELECT * FROM client where id = {call.message.chat.id}").fetchone()
            problem = q.execute(f"SELECT info FROM problem where id = {call.message.chat.id}").fetchone()[0]
            surname = res[1]
            name = res[2]
            phone = res[3]
            adress = res[6]

            bot.send_message(config.chat, "<b>‚ùóÔ∏è‚ùóÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ‚ùóÔ∏è‚ùóÔ∏è</b>\n\n" \
                                          f"üë§–§–ò–û: {surname} {name}\n"
                                          f"üìû–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +{phone}\n" \
                                          f"üåÜ–ê–¥—Ä–µ—Å –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π: {adress}\n" \
                                          f"üì≤–ú–æ–¥–µ–ª—å: {arr[1]}\n" \
                                          f"üõí–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {arr[2]}\n" \
                                          f"üìú–ü—Ä–æ–±–ª–µ–º–∞: {problem}\n" \
                                          f"üì¶–î–æ—Å—Ç–∞–≤–∫–∞: {config.delivery[call.message.chat.id]}", parse_mode="html")
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.send_message(res[0], "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üì§")
            q.execute(f"DELETE FROM problem where id = {call.message.chat.id}")
            connect.commit()

        except Exception as e:
            bot.send_message(config.coder, "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ó–ê–Ø–í–ö–ê 144‚ùóÔ∏è\n" \
                                           f"{e}")


def diagnostic1(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—éüë®‚Äçüíª":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard.profile)
        bot.clear_step_handler_by_chat_id(message.chat.id)
    else:
        send = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å")
        bot.register_next_step_handler(send, diagnostic2)


def diagnostic2(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—éüë®‚Äçüíª":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard.profile)
        bot.clear_step_handler_by_chat_id(message.chat.id)
    else:
        send = bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É")
        bot.register_next_step_handler(send, diagnostic3)


def diagnostic3(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—éüë®‚Äçüíª":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard.profile)
        bot.clear_step_handler_by_chat_id(message.chat.id)

    else:
        bot.send_message(message.chat.id,
                         "<b>–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–∞—Å—Ç–µ—Ä–æ–º</b>",
                         parse_mode='html')


def setadmin(message):
    adm_id = message.text
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—éüë®‚Äçüíª":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard.profile)
        bot.clear_step_handler_by_chat_id(message.chat.id)

    elif adm_id.isdigit():
        try:
            connect = sqlite3.connect('bot.db')
            q = connect.cursor()
            res = q.execute(f"SELECT * FROM adm where id = {adm_id}").fetchone()
            if res is None:
                q.execute("INSERT INTO adm(id) VALUES ('%s')" % (adm_id))
                connect.commit()
                bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω‚úÖ")

            bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ωüòå")
        except:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞‚ùóÔ∏è")



    else:
        bot.send_message(message.chat.id, "–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ id‚ùóÔ∏è")

def prepare_model_string(model_string):
    model_name = ""
    code_name = ""
    code_name_start = False
    for i in model_string:
        if i == "(":
            code_name_start = True
            continue
        if i == ")":
            code_name_start = False
            continue
        if code_name_start:
            code_name += i
        if not code_name_start:
            model_name+= i
    return model_name, code_name

def code_name_is_perhaps(text):
    digit = False
    letter = False
    for i in text:
        if i.isdigit():
            digit = True
        if i.isalpha():
            letter = True
        if digit and letter:
            return True
    return False

def model_in_model_name(model, model_name):
    print(model_name)
    print(model)
    model_name_ = model_name.split()
    for i in model_name_:
        if i == model:
            return True
    return False

def vivo_prices(message):
    brand = 'vivo'
    model = message.text.lower()
    ws = wb[brand]
    result = ""
    for column in range(1, 150):
        cell_model_value = ws.cell(row=1, column=column).value
        if isinstance(cell_model_value, str):
            if model in cell_model_value.strip().lower():
                if result == "":
                    result += cell_model_value.strip() + ":\n"
                    for row in range(2, 50):
                        cell_price_value = str(ws.cell(row=row, column=column).value)
                        if cell_price_value != "None":
                            result += cell_price_value + '\n'
                else:
                    result += "\n* * * * * * * * * * * * * * * * * * * * * *\n\n"
                    result += cell_model_value.strip() + ":\n"
                    for row in range(2, 50):
                        cell_price_value = str(ws.cell(row=row, column=column).value)
                        if cell_price_value != "None":
                            result += cell_price_value + '\n'
    if result == "":
        bot.send_message(message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    else:
        bot.send_message(message.chat.id, result)

def realmi_prices(message):
    brand = 'realmi'
    model = message.text.lower()
    ws = wb[brand]
    result = ""
    for column in range(1, 150):
        cell_model_value = ws.cell(row=1, column=column).value
        if isinstance(cell_model_value, str):
            if model in cell_model_value.strip().lower():
                if result == "":
                    result += cell_model_value.strip() + ":\n"
                    for row in range(2, 50):
                        cell_price_value = str(ws.cell(row=row, column=column).value)
                        if cell_price_value != "None":
                            result += cell_price_value + '\n'
                else:
                    result += "\n* * * * * * * * * * * * * * * * * * * * * *\n\n"
                    result += cell_model_value.strip() + ":\n"
                    for row in range(2, 50):
                        cell_price_value = str(ws.cell(row=row, column=column).value)
                        if cell_price_value != "None":
                            result += cell_price_value + '\n'
    if result == "":
        bot.send_message(message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    else:
        bot.send_message(message.chat.id, result)

def oppo_prices(message):
    brand = 'oppo'
    model = message.text.lower()
    ws = wb[brand]
    result = ""
    for column in range(1, 150):
        cell_model_value = ws.cell(row=1, column=column).value
        if isinstance(cell_model_value, str):
            if model in cell_model_value.strip().lower():
                if result == "":
                    result += cell_model_value.strip() + ":\n"
                    for row in range(2, 50):
                        cell_price_value = str(ws.cell(row=row, column=column).value)
                        if cell_price_value != "None":
                            result += cell_price_value + '\n'
                else:
                    result += "\n* * * * * * * * * * * * * * * * * * * * * *\n\n"
                    result += cell_model_value.strip() + ":\n"
                    for row in range(2, 50):
                        cell_price_value = str(ws.cell(row=row, column=column).value)
                        if cell_price_value != "None":
                            result += cell_price_value + '\n'
    if result == "":
        bot.send_message(message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    else:
        bot.send_message(message.chat.id, result)

def xiaomi_prices(message):
    brand = 'xiaomi'
    model = message.text.lower()
    ws = wb[brand]
    result = ""
    for column in range(1, 150):
        cell_model_value = ws.cell(row=1, column=column).value
        if isinstance(cell_model_value, str):
            if model in cell_model_value.strip().lower():
                if result == "":
                    result += cell_model_value.strip() + ":\n"
                    for row in range(2, 50):
                        cell_price_value = str(ws.cell(row=row, column=column).value)
                        if cell_price_value != "None":
                            result += cell_price_value + '\n'
                else:
                    result += "\n* * * * * * * * * * * * * * * * * * * * * *\n\n"
                    result += cell_model_value.strip() + ":\n"
                    for row in range(2, 50):
                        cell_price_value = str(ws.cell(row=row, column=column).value)
                        if cell_price_value != "None":
                            result += cell_price_value + '\n'
    if result == "":
        bot.send_message(message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    else:
        bot.send_message(message.chat.id, result)

def samsung_prices(message):
    brand = 'samsung'
    model = message.text.lower()
    ws = wb[brand]
    result = ""
    for column in range(1, 150):
        cell_model_value = ws.cell(row=1, column=column).value
        if isinstance(cell_model_value, str):
            if model in cell_model_value.strip().lower():
                if result == "":
                    result += cell_model_value.strip() + ":\n"
                    for row in range(2, 50):
                        cell_price_value = str(ws.cell(row=row, column=column).value)
                        if cell_price_value != "None":
                            result += cell_price_value + '\n'
                else:
                    result += "\n* * * * * * * * * * * * * * * * * * * * * *\n\n"
                    result += cell_model_value.strip() + ":\n"
                    for row in range(2, 50):
                        cell_price_value = str(ws.cell(row=row, column=column).value)
                        if cell_price_value != "None":
                            result += cell_price_value + '\n'
    if result == "":
        bot.send_message(message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    else:
        bot.send_message(message.chat.id, result)

def huawei_honor_prices(message):
    brand = 'huawei'
    model = message.text.lower()
    if model == '10':
        model='honor 10 f'
    if model == '20':
        model='honor 20 '
    if model == '30':
        model='honor 30 '
    ws = wb[brand]
    code_name_is_perhaps_ = code_name_is_perhaps(model)
    result = ""
    for column in range(1, 150):
        cell_model_value = ws.cell(row=1, column=column).value
        if isinstance(cell_model_value, str):
            # print(cell_model_value.strip().lower())
            model_name, codename = prepare_model_string(cell_model_value.strip().lower())
            #if model_in_model_name(model, model_name) or (code_name_is_perhaps_ and model in codename):
            print(model_name)
            if model in model_name or (code_name_is_perhaps_ and model in codename):
                print(cell_model_value.strip().lower())
                if result == "":
                    result += cell_model_value.strip() + ":\n"
                    for row in range(2, 50):
                        cell_price_value = str(ws.cell(row=row, column=column).value)
                        if cell_price_value != "None":
                            result += cell_price_value + '\n'
                else:
                    result += "\n* * * * * * * * * * * * * * * * * * * * * *\n\n"
                    result += cell_model_value.strip() + ":\n"
                for row in range(2, 50):
                    cell_price_value = str(ws.cell(row=row, column=column).value)
                    if cell_price_value != "None":
                        result += cell_price_value + '\n'
    if result == "":
        bot.send_message(message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    else:
        bot.send_message(message.chat.id, result)


def next_step(message):
    colvo = message.text
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—éüë®‚Äçüíª":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard.profile)
        bot.clear_step_handler_by_chat_id(message.chat.id)

    elif colvo.isdigit():
        if int(colvo) <= 1:
            send = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å")
            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.register_next_step_handler(send, next_step1, colvo)
        else:
            send = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª–∏ –≤–∞—à–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:\n" \
                                                     "–º–æ–¥–µ–ª—å 1, –º–æ–¥–µ–ª—å 2 ...\n")
            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.register_next_step_handler(send, next_step1, colvo)

    else:
        send = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(send, next_step)


def next_step1(message, colvo):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—éüë®‚Äçüíª":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard.profile)
        bot.clear_step_handler_by_chat_id(message.chat.id)

    elif int(colvo) <= 1:
        model = message.text
        send = bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É")
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(send, next_step2, colvo, model)
    else:
        model = message.text
        send = bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n" \
                                                 "–ø—Ä–æ–±–ª–µ–º–∞ 1, –ø—Ä–æ–±–ª–µ–º–∞ 2 ... \n")
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(send, next_step2, colvo, model)


def next_step2(message, colvo, model):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—éüë®‚Äçüíª":
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard.profile)
        bot.clear_step_handler_by_chat_id(message.chat.id)
    else:
        try:
            userid = message.chat.id
            conect = sqlite3.connect('bot.db')
            q = conect.cursor()
            res = q.execute(f"SELECT * FROM client where id = {userid}").fetchone()
            surname = res[1]
            name = res[2]
            phone = res[3]
            adress = res[6]
            colvo_zakazov = res[5]
            new_colvo = int(colvo_zakazov) + 1
            q.execute(f"update client set colvo = {new_colvo} where id = {userid}")
            conect.commit()
            problem = message.text
            q.execute("INSERT INTO problem(id, info) VALUES ('%s', '%s')" % (userid, problem))
            conect.commit()

            key = types.InlineKeyboardMarkup()
            send = types.InlineKeyboardButton("üëç–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_{}_{}".format(model, colvo))
            cancel = types.InlineKeyboardButton("‚ùå–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="delete")
            key.row(send, cancel)
            bot.send_message(userid, f"‚ùóÔ∏è‚ùóÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ‚ùóÔ∏è‚ùóÔ∏è\n\n" \
                                     f"üë§–§–ò–û: {surname} {name}\n"
                                     f"üìû–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +{phone}\n" \
                                     f"üåÜ–ê–¥—Ä–µ—Å –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π: {adress}\n" \
                                     f"üì≤–ú–æ–¥–µ–ª—å: {model}\n" \
                                     f"üõí–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {colvo}\n" \
                                     f"üìú–ü—Ä–æ–±–ª–µ–º–∞: {problem}", parse_mode='html', reply_markup=key)



        except Exception as e:
            bot.send_message(config.coder, "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ó–ê–Ø–í–ö–ê 144‚ùóÔ∏è\n" \
                                           f"{e}")


def register(message):
    try:
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
        button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ωüìû", request_contact=True)
        keyboard.add(button_phone)
        bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=keyboard)
        userid = message.chat.id
        connect = sqlite3.connect('bot.db')
        q = connect.cursor()
        res = q.execute(f"SELECT * FROM client where id is " + str(userid)).fetchone()
        if res is None:
            data = message.text.split(" ")
            surname = str(data[0])
            name = str(data[1])
            cashback = 0
            colvo = 0
            q.execute("INSERT INTO client(id, surname,name1, cashback,colvo) VALUES ('%s','%s','%s','%s','%s')" % (
                userid, surname, name, cashback, colvo))
            connect.commit()
    except e:
        send = bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n" \
                                                 "<b>–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: –ü–µ—Ç—Ä–æ–≤ –í–∏–∫—Ç–æ—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á</b>", parse_mode='html')
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        bot.register_next_step_handler(send, register)


@bot.message_handler(content_types=['contact'])
def contact(message):
    try:
        userid = message.chat.id
        if message.contact is not None:
            phone = message.contact.phone_number
            connect = sqlite3.connect('bot.db')
            q = connect.cursor()
            res = q.execute(f"SELECT * FROM client where id = '{userid}'").fetchone()
            if res[3] is None:
                q.execute(f"update client set phone = {phone} where id = {userid}")
                connect.commit()
            send = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–π –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π")
            bot.clear_step_handler_by_chat_id(message.chat.id)
            bot.register_next_step_handler(send, register1)
    except Exception as e:
        bot.send_message(config.coder, "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ö–û–ù–¢–ê–ö–¢–´‚ùóÔ∏è\n" \
                                       f"{e}")


def register1(message):
    try:
        userid = message.chat.id
        adress = str(message.text)
        connect = sqlite3.connect('bot.db')
        q = connect.cursor()
        res = q.execute(f"SELECT * FROM client where id = '{userid}'").fetchone()
        if res[6] is None:
            q.execute(f"update client set adress = '{adress}' where id = {userid}")
            connect.commit()
            bot.send_message(userid, "<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ</b>", parse_mode='html',
                             reply_markup=keyboard.profile)
    except Exception as e:
        bot.send_message(config.coder, "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø‚ùóÔ∏è\n" \
                                       f"{e}")


def add_cashback(message):
    chat_id = message.text
    send = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—ç—à–µ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    bot.clear_reply_handlers_by_message_id(message.chat.id)
    bot.register_next_step_handler(send, add_money, chat_id)


def add_money(message, chat_id):
    summ = message.text
    if summ.isdigit():
        try:
            summ = int(summ)
            connect = sqlite3.connect('bot.db')
            q = connect.cursor()
            balik = q.execute(f"SELECT cashback FROM client where id = {chat_id}").fetchone()[0]
            balik = int(balik + summ)
            q.execute(f"update client set cashback = {balik} where id = {chat_id}")
            connect.commit()
            bot.send_message(message.chat.id, "–ù–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ‚úÖ")
            bot.send_message(chat_id, f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –∫—ç—à–±–µ–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ {summ} —Ä—É–±–ª–µ–π")
        except Exception as e:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

            bot.send_message(config.coder, "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø‚ùóÔ∏è\n" \
                                           f"{e}")
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")


def min_cashback(message):
    chat_id = message.text
    connect = sqlite3.connect('bot.db')
    q = connect.cursor()
    bal = q.execute(f"SELECT cashback FROM client where id = {chat_id}").fetchone()[0]
    send = bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–ø–∏—Å–∞–Ω–∏—è.\n–î–æ—Å—Ç—É–ø–Ω–æ {bal}—Ä—É–±")
    bot.clear_reply_handlers_by_message_id(message.chat.id)
    bot.register_next_step_handler(send, min_money, chat_id, bal)


def min_money(message, chat_id, bal):
    summ = message.text
    if summ.isdigit() and int(summ) <= int(bal):
        new_summ = int(bal) - int(summ)
        connect = sqlite3.connect('bot.db')
        q = connect.cursor()
        q.execute(f"update client set cashback = {new_summ} where id = {chat_id}")
        connect.commit()
        bot.send_message(message.chat.id, "–ë–∞–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã‚úÖ")
        bot.send_message(chat_id, f"–£ –≤–∞—Å –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω–Ω—ã –±–∞–ª—ã –Ω–∞ —Å—É–º–º—É {summ}")
    else:
        bot.send_message(message.chat.id, "–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—èüëø")


def setphone(message):
    try:
        new_phone = message.text
        user_id = message.chat.id
        connect = sqlite3.connect('bot.db')
        q = connect.cursor()
        res = q.execute("SELECT * FROM master_phone").fetchone()
        if res is None:
            q.execute("INSERT INTO master_phone (id, phone) VALUES ('%s', '%s')" % (user_id, new_phone))
            connect.commit()
        else:
            q.execute(f"update master_phone set phone = {new_phone} where id = {user_id}")
            connect.commit()

        bot.send_message(user_id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except:
        bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def get_price(brand, model):
    ws = wb[brand]
    result = ""
    for column in range(1, 30):
        cell_model_value = ws.cell(row=1, column=column).value
        if isinstance(cell_model_value, str):
            if model.lower() in cell_model_value.strip().lower():
                result += cell_model_value.strip() + ":\n\n"
                for row in range(2, 50):
                    cell_price_value = str(ws.cell(row=row, column=column).value)
                    if cell_price_value != "None":
                        result += cell_price_value + '\n'
                return result
    return "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ü–µ–Ω—ã –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"


while True:
    try:
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        print(e)

        time.sleep(15)
